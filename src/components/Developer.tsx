/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useAnimations, useFBX, useGLTF } from '@react-three/drei'
import * as THREE from 'three'
import type { GLTF } from 'three-stdlib';
import React, { useEffect, useRef } from 'react';

interface DeveloperGLTF extends GLTF {
    nodes: {
        Hips: THREE.Object3D;
        EyeLeft: THREE.SkinnedMesh & {
            geometry: THREE.BufferGeometry;
            skeleton: THREE.Skeleton;
            morphTargetDictionary: any;
            morphTargetInfluences: number[];
        };
        EyeRight: THREE.SkinnedMesh & {
            geometry: THREE.BufferGeometry;
            skeleton: THREE.Skeleton;
            morphTargetDictionary: any;
            morphTargetInfluences: number[];
        };
        Wolf3D_Head: THREE.SkinnedMesh & {
            geometry: THREE.BufferGeometry;
            skeleton: THREE.Skeleton;
            morphTargetDictionary: any;
            morphTargetInfluences: number[];
        };
        Wolf3D_Teeth: THREE.SkinnedMesh & {
            geometry: THREE.BufferGeometry;
            skeleton: THREE.Skeleton;
            morphTargetDictionary: any;
            morphTargetInfluences: number[];
        };
        Wolf3D_Hair: THREE.SkinnedMesh & {
            geometry: THREE.BufferGeometry;
            skeleton: THREE.Skeleton;
        };
        Wolf3D_Glasses: THREE.SkinnedMesh & {
            geometry: THREE.BufferGeometry;
            skeleton: THREE.Skeleton;
        };
        Wolf3D_Outfit_Top: THREE.SkinnedMesh & {
            geometry: THREE.BufferGeometry;
            skeleton: THREE.Skeleton;
        };
        Wolf3D_Outfit_Bottom: THREE.SkinnedMesh & {
            geometry: THREE.BufferGeometry;
            skeleton: THREE.Skeleton;
        };
        Wolf3D_Outfit_Footwear: THREE.SkinnedMesh & {
            geometry: THREE.BufferGeometry;
            skeleton: THREE.Skeleton;
        };
        Wolf3D_Body: THREE.SkinnedMesh & {
            geometry: THREE.BufferGeometry;
            skeleton: THREE.Skeleton;
        };
    };
    materials: {
        Wolf3D_Eye: THREE.Material;
        Wolf3D_Skin: THREE.Material;
        Wolf3D_Teeth: THREE.Material;
        Wolf3D_Hair: THREE.Material;
        Wolf3D_Glasses: THREE.Material;
        Wolf3D_Outfit_Top: THREE.Material;
        'Wolf3D_Outfit_Bottom.002': THREE.Material;
        Wolf3D_Outfit_Footwear: THREE.Material;
        Wolf3D_Body: THREE.Material;
    };
}

interface DeveloperProps extends React.ComponentProps<'group'> {
    animationName?: string;
}

const Developer: React.FC<DeveloperProps> = ({animationName = 'idle', ...props}) => {
    const group = useRef<THREE.Group>(null!);
    const { nodes, materials } = useGLTF("/models/human/developer.glb") as unknown as DeveloperGLTF;
    
    const { animations: idleAnimation } = useFBX("/models/animations/idle.fbx");
    const { animations: saluteAnimation } = useFBX(
      "/models/animations/salute.fbx"
    );
    const { animations: victoryAnimation } = useFBX(
      "/models/animations/victory.fbx"
    );
    const { animations: clappingAnimation } = useFBX(
      "/models/animations/clapping.fbx"
    );
    idleAnimation[0].name = "idle";
    saluteAnimation[0].name = "salute";
    victoryAnimation[0].name = "victory";
    clappingAnimation[0].name = "clapping";
    const { actions } = useAnimations(
      [
        idleAnimation[0],
        saluteAnimation[0],
        victoryAnimation[0],
        clappingAnimation[0],
      ],
      group
    );
    
    useEffect(() => {
        actions[animationName]?.reset()?.fadeIn(0.5)?.play();
        return () => {
            actions[animationName]?.fadeOut(0.5);
        };
    }, [animationName]);

    return (
        <group {...props} dispose={null} ref={group}>
            <primitive object={nodes.Hips} />
            <skinnedMesh
                name="EyeLeft"
                geometry={nodes.EyeLeft.geometry}
                material={materials.Wolf3D_Eye}
                skeleton={nodes.EyeLeft.skeleton}
                morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
                morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
            />
            <skinnedMesh
                name="EyeRight"
                geometry={nodes.EyeRight.geometry}
                material={materials.Wolf3D_Eye}
                skeleton={nodes.EyeRight.skeleton}
                morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
                morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
            />
            <skinnedMesh
                name="Wolf3D_Head"
                geometry={nodes.Wolf3D_Head.geometry}
                material={materials.Wolf3D_Skin}
                skeleton={nodes.Wolf3D_Head.skeleton}
                morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
                morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
            />
            <skinnedMesh
                name="Wolf3D_Teeth"
                geometry={nodes.Wolf3D_Teeth.geometry}
                material={materials.Wolf3D_Teeth}
                skeleton={nodes.Wolf3D_Teeth.skeleton}
                morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
                morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Hair.geometry}
                material={materials.Wolf3D_Hair}
                skeleton={nodes.Wolf3D_Hair.skeleton}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Glasses.geometry}
                material={materials.Wolf3D_Glasses}
                skeleton={nodes.Wolf3D_Glasses.skeleton}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Outfit_Top.geometry}
                material={materials.Wolf3D_Outfit_Top}
                skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
                material={materials['Wolf3D_Outfit_Bottom.002']}
                skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
                material={materials.Wolf3D_Outfit_Footwear}
                skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Body.geometry}
                material={materials.Wolf3D_Body}
                skeleton={nodes.Wolf3D_Body.skeleton}
            />
        </group>
    );
};

useGLTF.preload('/models/human/developer.glb')

export default Developer;